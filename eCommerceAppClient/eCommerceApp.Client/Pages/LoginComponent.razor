@page "/authentication/login"
@page "/authentication/login/{route}"

<div class="container-fluid m-5 p-5">
    <div class="row">
        <div class="col-lg-4 offset-4">
            <EditForm Model="Login" Enhance OnValidSubmit="LoginUser">
                <DataAnnotationsValidator />
                @if (string.IsNullOrEmpty(Message))
                {
                    <div class="alert alert-@AlertType">@Message</div>
                }
                <div class="card p-4">
                    <div class="card-header">Kindly Login</div>
                    <div class="card-body">
                        <div class="form-group">
                            <FloatingText @bind-Value="Login.Email" class="form-control" Type="text" Label="Email Address" Placeholder="john@doe.com" />
                            <ValidationMessage For="() => Login.Email" />
                        </div>
                        <div class="form-group">
                            <FloatingText @bind-Value="Login.Password" class="form-control" Type="password" Label="Password" />
                            <ValidationMessage For="() => Login.Password" />
                        </div>
                    </div>
                    <button class="btn btn-primary" type="submit">Login</button> 
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    string AlertType = string.Empty;
    string Message = string.Empty;
    public LoginUser Login { get; set; } = new();
    [Parameter] public string Route { get; set; } = null!;

    private async Task LoginUser()
    {
        Message = string.Empty;
        AlertType = string.Empty;
        var result = await authenticationService.LoginUserAsync(Login);
        if (!result.Success)
        {
            Message = result.Message;
            AlertType = "danger";
            return;
        }
        string cookieValue = tokenService.FormToken(result.Token, result.RefreshToken);
        await tokenService.SetCookieAsync(Constants.Cookie.Name, cookieValue, Constants.Cookie.Days, Constants.Cookie.Path);
        (authenticationStateProvider as CustomAuthenticationStateProvider)!.NotifyAuthenticationState();
        NavManager.NavigateTo(Route == null ? "/" : Route, true);
    }
}